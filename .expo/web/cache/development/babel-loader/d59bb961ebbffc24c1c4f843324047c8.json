{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/appdevmacbook10/Desktop/rhydhur/Rhymes/src/state_manager/manager.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer } from 'react';\nimport { Audio, Video } from 'expo-av';\nimport provider from \"../provider/dataProvider\";\nvar StateContext = React.createContext();\n\nvar stateReducer = function stateReducer(state, action) {\n  switch (action.type) {\n    case \"start_background_music\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isBackgroundMusic: true\n      });\n\n    case \"stop_background_music\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isBackgroundMusic: false\n      });\n\n    case \"setPosition_letter\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        position: action.payload.position,\n        letter: action.payload.letter,\n        stopTime: action.payload.stopTime\n      });\n\n    case \"set_play\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        play: action.payload\n      });\n\n    case \"set_next\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        position: action.payload.position,\n        play: action.payload.play,\n        letter: action.payload.letter,\n        stopTime: action.payload.stopTime\n      });\n\n    case \"set_interval\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        interval: action.payload\n      });\n\n    case \"set_rhyme_bar\":\n      if (action.payload >= 80) {\n        state.music.stopAsync();\n        clearInterval(state.imageInterval);\n        clearInterval(state.interval);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          rhymeBar: 0,\n          currentTime: 0,\n          play: false,\n          letterImages: provider.letterRows[state.position.row].letterImages[state.position.column][0],\n          letterMeaning: provider.letterRows[state.position.row].moreDetails[state.position.column].meaning[0]\n        });\n      } else {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          rhymeBar: action.payload\n        });\n      }\n\n    case \"set_start_time\":\n      if (state.rhymeBar >= 80) {}\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        startTime: action.payload\n      });\n\n    case \"set_current_time\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currentTime: 0\n      });\n\n    case \"set_letter_image_meaning\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        letterImages: action.payload.image,\n        letterMeaning: action.payload.meaning\n      });\n\n    case \"set_image_interval\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        imageInterval: action.payload\n      });\n  }\n};\n\nexport var StateProvider = function StateProvider(props) {\n  var _useReducer = useReducer(stateReducer, {\n    backgroundMusic: new Audio.Sound(),\n    isBackgroundMusic: null,\n    music: new Audio.Sound(),\n    position: {\n      row: null,\n      column: null\n    },\n    play: false,\n    letter: null,\n    interval: null,\n    rhymeBar: 0,\n    startTime: \"00:00\",\n    stopTime: \"\",\n    currentTime: 0,\n    letterImages: \"\",\n    letterMeaning: \"\",\n    imageInterval: null\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var startBackgroundMusic = function startBackgroundMusic() {\n    return _regeneratorRuntime.async(function startBackgroundMusic$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (state.isBackgroundMusic) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"start_background_music\"\n            }));\n\n          case 3:\n            if (!(state.isBackgroundMusic === null)) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(state.backgroundMusic.loadAsync(require(\"../../assets/backgroundSong/rhyme_song2.mp3\")));\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(state.backgroundMusic.setIsLoopingAsync(true));\n\n          case 8:\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(state.backgroundMusic.playAsync());\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var stopBackgroundMusic = function stopBackgroundMusic() {\n    return _regeneratorRuntime.async(function stopBackgroundMusic$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(state.backgroundMusic.stopAsync());\n\n          case 2:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"stop_background_music\"\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var goRhymePage = function goRhymePage(navigation, row, column) {\n    return _regeneratorRuntime.async(function goRhymePage$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"setPosition_letter\",\n              payload: {\n                position: {\n                  row: row,\n                  column: column\n                },\n                letter: provider.letterRows[row].letters[column],\n                stopTime: provider.letterRows[row].duration[column]\n              }\n            }));\n\n          case 2:\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_letter_image_meaning\",\n              payload: {\n                image: provider.letterRows[row].letterImages[column][0],\n                meaning: provider.letterRows[row].moreDetails[column].meaning[0]\n              }\n            }));\n\n          case 4:\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(navigation.navigate(\"Rhymes\"));\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var willRhymePage = function willRhymePage() {\n    return _regeneratorRuntime.async(function willRhymePage$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(state.music.unloadAsync());\n\n          case 2:\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(state.music.loadAsync(provider.letterRows[state.position.row].rhyme[state.position.column]));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var setImage = function setImage() {\n    var intervalTime, numberOfImages, count, interval;\n    return _regeneratorRuntime.async(function setImage$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            intervalTime = provider.letterRows[state.position.row].moreDetails[state.position.column].interval;\n            numberOfImages = provider.letterRows[state.position.row].moreDetails[state.position.column].imageNumber;\n            count = 1;\n            interval = setInterval(function _callee() {\n              return _regeneratorRuntime.async(function _callee$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      if (count >= numberOfImages) {\n                        count = 0;\n                      }\n\n                      _context5.next = 3;\n                      return _regeneratorRuntime.awrap(dispatch({\n                        type: \"set_letter_image_meaning\",\n                        payload: {\n                          image: provider.letterRows[state.position.row].letterImages[state.position.column][count],\n                          meaning: provider.letterRows[state.position.row].moreDetails[state.position.column].meaning[count]\n                        }\n                      }));\n\n                    case 3:\n                      count++;\n\n                    case 4:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }, intervalTime);\n            _context6.next = 6;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_image_interval\",\n              payload: interval\n            }));\n\n          case 6:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function setRhymeTime() {\n    var stopTime, interval;\n    return _regeneratorRuntime.async(function setRhymeTime$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            stopTime = provider.letterRows[state.position.row].duration[state.position.column].split(':').reduce(function (acc, time) {\n              return 60 * acc + +time;\n            });\n            state.currentTime++;\n            interval = setInterval(function _callee2() {\n              var currentTime;\n              return _regeneratorRuntime.async(function _callee2$(_context7) {\n                while (1) {\n                  switch (_context7.prev = _context7.next) {\n                    case 0:\n                      currentTime = new Date(state.currentTime++ * 1000).toISOString().substr(11, 8).substring(3, 8);\n                      state.rhymeBar = state.rhymeBar + 80 / Number(stopTime);\n                      currentTime = state.rhymeBar >= 80 ? \"00:00\" : currentTime;\n                      _context7.next = 5;\n                      return _regeneratorRuntime.awrap(dispatch({\n                        type: \"set_start_time\",\n                        payload: currentTime\n                      }));\n\n                    case 5:\n                      _context7.next = 7;\n                      return _regeneratorRuntime.awrap(dispatch({\n                        type: \"set_rhyme_bar\",\n                        payload: state.rhymeBar\n                      }));\n\n                    case 7:\n                    case \"end\":\n                      return _context7.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }, 1000);\n            _context8.next = 5;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_interval\",\n              payload: interval\n            }));\n\n          case 5:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var togglePlay = function togglePlay() {\n    return _regeneratorRuntime.async(function togglePlay$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!state.play) {\n              _context9.next = 15;\n              break;\n            }\n\n            _context9.next = 3;\n            return _regeneratorRuntime.awrap(state.music.stopAsync());\n\n          case 3:\n            clearInterval(state.imageInterval);\n            clearInterval(state.interval);\n            _context9.next = 7;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_rhyme_bar\",\n              payload: 0\n            }));\n\n          case 7:\n            _context9.next = 9;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_start_time\",\n              payload: \"00:00\"\n            }));\n\n          case 9:\n            _context9.next = 11;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_current_time\"\n            }));\n\n          case 11:\n            _context9.next = 13;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_letter_image_meaning\",\n              payload: {\n                image: provider.letterRows[state.position.row].letterImages[state.position.column][0],\n                meaning: provider.letterRows[state.position.row].moreDetails[state.position.column].meaning[0]\n              }\n            }));\n\n          case 13:\n            _context9.next = 19;\n            break;\n\n          case 15:\n            setImage();\n            setRhymeTime();\n            _context9.next = 19;\n            return _regeneratorRuntime.awrap(state.music.playAsync());\n\n          case 19:\n            _context9.next = 21;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_play\",\n              payload: !state.play\n            }));\n\n          case 21:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var toggleNext = function toggleNext(type) {\n    var column, row;\n    return _regeneratorRuntime.async(function toggleNext$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            row = state.position.row;\n\n            if (type === \"next\") {\n              if (state.position.column + 1 >= provider.letterRows[row].rhyme.length) {\n                column = 0;\n\n                if (state.position.row + 1 < provider.letterRows.length) {\n                  row = state.position.row + 1;\n                } else {\n                  row = state.position.row;\n                  column = state.position.column;\n                }\n              } else {\n                column = state.position.column + 1;\n              }\n            } else {\n              if (state.position.column - 1 < 0) {\n                if (state.position.row - 1 < 0) {\n                  row = 0;\n                  column = 0;\n                } else {\n                  row = state.position.row - 1;\n                  column = provider.letterRows[row].rhyme.length - 1;\n                }\n              } else {\n                column = state.position.column - 1;\n              }\n            }\n\n            _context10.next = 4;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_next\",\n              payload: {\n                position: {\n                  row: row,\n                  column: column\n                },\n                play: false,\n                letter: provider.letterRows[row].letters[column],\n                stopTime: provider.letterRows[row].duration[column]\n              }\n            }));\n\n          case 4:\n            _context10.next = 6;\n            return _regeneratorRuntime.awrap(state.music.stopAsync());\n\n          case 6:\n            _context10.next = 8;\n            return _regeneratorRuntime.awrap(state.music.unloadAsync());\n\n          case 8:\n            _context10.next = 10;\n            return _regeneratorRuntime.awrap(state.music.loadAsync(provider.letterRows[row].rhyme[column]));\n\n          case 10:\n            clearInterval(state.imageInterval);\n            clearInterval(state.interval);\n            _context10.next = 14;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_rhyme_bar\",\n              payload: 0\n            }));\n\n          case 14:\n            _context10.next = 16;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_start_time\",\n              payload: \"00:00\"\n            }));\n\n          case 16:\n            _context10.next = 18;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_current_time\"\n            }));\n\n          case 18:\n            _context10.next = 20;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_letter_image_meaning\",\n              payload: {\n                image: provider.letterRows[row].letterImages[column][0],\n                meaning: provider.letterRows[row].moreDetails[column].meaning[0]\n              }\n            }));\n\n          case 20:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var stopRhyme = function stopRhyme() {\n    return _regeneratorRuntime.async(function stopRhyme$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.next = 2;\n            return _regeneratorRuntime.awrap(state.music.stopAsync());\n\n          case 2:\n            _context11.next = 4;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_play\",\n              payload: false\n            }));\n\n          case 4:\n            clearInterval(state.imageInterval);\n            clearInterval(state.interval);\n            _context11.next = 8;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_rhyme_bar\",\n              payload: 0\n            }));\n\n          case 8:\n            _context11.next = 10;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_start_time\",\n              payload: \"00:00\"\n            }));\n\n          case 10:\n            _context11.next = 12;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: \"set_current_time\"\n            }));\n\n          case 12:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var boundActions = {\n    startBackgroundMusic: startBackgroundMusic,\n    stopBackgroundMusic: stopBackgroundMusic,\n    goRhymePage: goRhymePage,\n    willRhymePage: willRhymePage,\n    togglePlay: togglePlay,\n    toggleNext: toggleNext,\n    stopRhyme: stopRhyme\n  };\n  return React.createElement(StateContext.Provider, _extends({\n    value: _objectSpread({\n      state: state\n    }, boundActions)\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }));\n};\nexport default StateContext;","map":{"version":3,"sources":["/Users/appdevmacbook10/Desktop/rhydhur/Rhymes/src/state_manager/manager.js"],"names":["React","useReducer","Audio","Video","provider","StateContext","createContext","stateReducer","state","action","type","isBackgroundMusic","position","payload","letter","stopTime","play","interval","music","stopAsync","clearInterval","imageInterval","rhymeBar","currentTime","letterImages","letterRows","row","column","letterMeaning","moreDetails","meaning","startTime","image","StateProvider","props","backgroundMusic","Sound","dispatch","startBackgroundMusic","loadAsync","require","setIsLoopingAsync","playAsync","stopBackgroundMusic","goRhymePage","navigation","letters","duration","navigate","willRhymePage","unloadAsync","rhyme","setImage","intervalTime","numberOfImages","imageNumber","count","setInterval","setRhymeTime","split","reduce","acc","time","Date","toISOString","substr","substring","Number","togglePlay","toggleNext","length","stopRhyme","boundActions"],"mappings":"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","sourcesContent":["import React, {useReducer} from 'react'\nimport { Audio, Video } from 'expo-av';\nimport provider from '../provider/dataProvider'\n\nconst StateContext = React.createContext()\n\nconst stateReducer = (state, action) => {\n\n    switch (action.type){\n        case \"start_background_music\": \n            return {...state, isBackgroundMusic: true}\n\n        case \"stop_background_music\": \n            return {...state, isBackgroundMusic: false}\n\n        case \"setPosition_letter\": \n            return {...state, position: action.payload.position, letter: action.payload.letter, stopTime: action.payload.stopTime}\n        \n        case \"set_play\": \n            return {...state, play: action.payload}\n\n        case \"set_next\":\n            return {...state, position: action.payload.position, play: action.payload.play, letter: action.payload.letter, stopTime: action.payload.stopTime}\n\n        case \"set_interval\":\n            return {...state, interval: action.payload}\n\n        case \"set_rhyme_bar\":\n            if(action.payload >= 80){\n                state.music.stopAsync()\n                clearInterval(state.imageInterval)\n                clearInterval(state.interval)\n\n                return {\n                    ...state, rhymeBar: 0, currentTime: 0, play: false,\n                    letterImages: provider.letterRows[state.position.row].letterImages[state.position.column][0],\n                    letterMeaning: provider.letterRows[state.position.row].moreDetails[state.position.column].meaning[0]\n                }\n            }\n            else{\n                return {...state, rhymeBar: action.payload}\n            }\n\n        case \"set_start_time\":\n            if(state.rhymeBar >= 80){\n                //action.payload = state.stopTime\n            } \n            return {...state, startTime: action.payload}\n\n        case \"set_current_time\":\n            return {...state, currentTime: 0}\n\n        case \"set_letter_image_meaning\":\n            return {...state, letterImages: action.payload.image, letterMeaning: action.payload.meaning}\n\n        case \"set_image_interval\":\n            return {...state, imageInterval: action.payload}\n    }\n\n}\n\n\n\nexport const StateProvider = (props) => {\n\n    const [state, dispatch] = useReducer(stateReducer,{\n        backgroundMusic: new Audio.Sound(), isBackgroundMusic: null, music: new Audio.Sound(), position: {row: null, column: null},\n        play: false, letter: null, interval: null, rhymeBar: 0, startTime: \"00:00\", stopTime: \"\", currentTime: 0,\n        letterImages: \"\", letterMeaning: \"\", imageInterval: null\n    })\n\n    const startBackgroundMusic = async() => {\n        if(!state.isBackgroundMusic){\n            await dispatch({type: \"start_background_music\"})\n            if(state.isBackgroundMusic === null){\n                await state.backgroundMusic.loadAsync(require('../../assets/backgroundSong/rhyme_song2.mp3'));\n                await state.backgroundMusic.setIsLoopingAsync(true);\n            }\n            await state.backgroundMusic.playAsync();\n        }\n    }\n\n    const stopBackgroundMusic = async () => {\n        await state.backgroundMusic.stopAsync()\n        await dispatch({type: \"stop_background_music\"})\n    }\n\n    const goRhymePage = async (navigation, row, column) => {\n        await dispatch({type: \"setPosition_letter\", payload: {\n            position: {row, column},\n            letter: provider.letterRows[row].letters[column],\n            stopTime: provider.letterRows[row].duration[column]\n        }})\n\n        await dispatch({type: \"set_letter_image_meaning\", payload: {\n            image: provider.letterRows[row].letterImages[column][0],\n            meaning: provider.letterRows[row].moreDetails[column].meaning[0]\n        }})\n        await navigation.navigate(\"Rhymes\")\n    }\n\n    const willRhymePage = async () => {\n        await state.music.unloadAsync()\n        await state.music.loadAsync(provider.letterRows[state.position.row].rhyme[state.position.column])\n        //await state.music.setIsLoopingAsync(true)\n    }\n\n    const setImage = async () => {\n        let intervalTime = provider.letterRows[state.position.row].moreDetails[state.position.column].interval\n        let numberOfImages = provider.letterRows[state.position.row].moreDetails[state.position.column].imageNumber\n\n        let count = 1\n        let interval = setInterval(async () =>{\n            if(count >= numberOfImages){\n                count = 0\n            }\n\n            await dispatch({type: \"set_letter_image_meaning\", payload: {\n                image: provider.letterRows[state.position.row].letterImages[state.position.column][count],\n                meaning: provider.letterRows[state.position.row].moreDetails[state.position.column].meaning[count]\n            }})\n\n            count++\n        }, intervalTime)\n\n        await dispatch({type: \"set_image_interval\", payload: interval})\n    }\n\n    async function setRhymeTime(){\n        let stopTime =  provider.letterRows[state.position.row].duration[state.position.column].split(':').reduce((acc,time) => (60 * acc) + +time);\n        // let everyInterval = String(Number(stopTime)/80).replace(\".\",\"\")\n        // everyInterval = everyInterval.length === 1 ? `${everyInterval}000` : everyInterval.length === 2 ? `${everyInterval}00`\n        //  : everyInterval.length === 3 ? `${everyInterval}0` : everyInterval.substring(0,4)\n\n        //  everyInterval = everyInterval[0] == '0' ? everyInterval.substring(1, everyInterval.length) : everyInterval\n        //  everyInterval = Number(everyInterval)\n\n        state.currentTime++\n\n        let interval = setInterval(async () =>{\n\n            let currentTime = new Date((state.currentTime++) * 1000).toISOString().substr(11, 8).substring(3, 8)\n            state.rhymeBar = state.rhymeBar + (80/Number(stopTime))\n\n            currentTime = state.rhymeBar >= 80 ? \"00:00\" : currentTime\n            await dispatch({type: \"set_start_time\", payload: currentTime})\n            await dispatch({type: \"set_rhyme_bar\", payload: state.rhymeBar})\n\n        }, 1000)\n\n        await dispatch({type: \"set_interval\", payload: interval})\n    }\n\n    const togglePlay = async () => {\n        if(state.play){\n            await state.music.stopAsync()\n            clearInterval(state.imageInterval)\n            clearInterval(state.interval)\n            await dispatch({type: \"set_rhyme_bar\", payload: 0})\n            await dispatch({type: \"set_start_time\", payload: \"00:00\"})\n            await dispatch({type: \"set_current_time\"})\n            await dispatch({type: \"set_letter_image_meaning\", payload: {\n                image: provider.letterRows[state.position.row].letterImages[state.position.column][0],\n                meaning: provider.letterRows[state.position.row].moreDetails[state.position.column].meaning[0]\n            }})\n        }\n        else{\n            setImage()\n            setRhymeTime()\n            await state.music.playAsync()\n        }\n        await dispatch({type: \"set_play\", payload: !state.play})\n    }\n\n    const toggleNext = async (type) => {\n        let column;\n        let row = state.position.row\n\n        if(type === \"next\"){\n            if(state.position.column + 1 >= provider.letterRows[row].rhyme.length){\n                column = 0\n                if(state.position.row + 1 < provider.letterRows.length){\n                    row = state.position.row + 1\n                }\n                else{\n                    row = state.position.row\n                    column = state.position.column\n                }\n            }\n            else{\n                column = state.position.column + 1\n            }\n        }\n        else{\n            if(state.position.column - 1 < 0){\n                if(state.position.row - 1 < 0){\n                    row = 0\n                    column = 0\n                }\n                else{\n                    row = state.position.row - 1\n                    column = (provider.letterRows[row].rhyme.length) - 1\n                }\n            }\n            else{\n                column = state.position.column - 1\n            }\n        }\n\n        await dispatch({type: \"set_next\", payload: {\n            position: {\n                row: row, column: column\n            },\n            play: false,\n            letter: provider.letterRows[row].letters[column],\n            stopTime: provider.letterRows[row].duration[column]\n        }})\n        await state.music.stopAsync()\n        await state.music.unloadAsync()\n        await state.music.loadAsync(provider.letterRows[row].rhyme[column])\n        //await state.music.setIsLoopingAsync(true);\n        clearInterval(state.imageInterval)\n        clearInterval(state.interval)\n        await dispatch({type: \"set_rhyme_bar\", payload: 0})\n        await dispatch({type: \"set_start_time\", payload: \"00:00\"})\n        await dispatch({type: \"set_current_time\"})\n        await dispatch({type: \"set_letter_image_meaning\", payload: {\n            image: provider.letterRows[row].letterImages[column][0],\n            meaning: provider.letterRows[row].moreDetails[column].meaning[0]\n        }})\n    }\n\n    const stopRhyme = async () => {\n        await state.music.stopAsync()\n        await dispatch({type: \"set_play\", payload: false})\n        clearInterval(state.imageInterval)\n        clearInterval(state.interval)\n        await dispatch({type: \"set_rhyme_bar\", payload: 0})\n        await dispatch({type: \"set_start_time\", payload: \"00:00\"})\n        await dispatch({type: \"set_current_time\"})\n    }\n\n\n    const boundActions = {\n       startBackgroundMusic,\n       stopBackgroundMusic,\n       goRhymePage,\n       willRhymePage,\n       togglePlay,\n       toggleNext,\n       stopRhyme\n    }\n\n\n    return (\n        <StateContext.Provider value={{state: state, ...boundActions}}  {...props}/>\n        )\n\n}\n\nexport default StateContext"]},"metadata":{},"sourceType":"module"}